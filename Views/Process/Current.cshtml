@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@model beerOfThings.ViewModels.ProcessDetails;

@{ int current = System.Convert.ToInt32(Context.Request.Cookies["currentState"]); }
@{ int end = System.Convert.ToInt32(Context.Request.Cookies["endState"]); }
@{
    <h1>@Model.recipe.Name</h1>

    @if (current < end)
    {
        <p>
            <span>Obecny etap : @Model.brewing[current].Stage.Name</span>
        </p>
        <p>
            <span>Temperatura: @Model.brewing[current].Stage.OptimalTemperature °C</span>
        </p>
        <p>
            <span>Czas : @Model.brewing[current].Stage.Minutes minut</span>
        </p>

        <div>
            <h4>Proces zakończy się za:</h4>
            <p id="countdown"></p>

        </div>


        <a class="bg-yellow-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" href="/Process/Previous">Poprzedni</a>
        <a class="bg-green-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"href="/Process/Next"> Dalej </a>
    }
    else if (current >= end)
    {
        <h2>Skończono proces</h2>
    }
    else
    {
        <h2>BłĄD</h2>
    }
}

<canvas id="line-chart" width="800" height="450"></canvas>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
<script>
    let end = @Model.brewing[current].Stage.Minutes * 60000;
    let now = new Date().getTime();
    let breakPoint = new Date(now + end).getTime();
    var countdown = setInterval(function () {
        now = new Date().getTime();
        let distance = breakPoint - now;
        console.log(distance);
        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        let seconds = Math.floor((distance % (1000 * 60)) / 1000);

        document.getElementById("countdown").innerHTML = minutes + " min " + seconds+" s"

        if (distance < 0) {
            clearInterval(countdown);
            document.getElementById("countdown").innerHTML = "Skończony, przejdź do następnego etapu";
        }
    }, 1000);


    losowo = new Array();
    for (var i = 0; i < 10; i++) {
        losowo.push(Math.round(Math.random() * 80));
    }

    new Chart(document.getElementById("line-chart"), {
        type: 'line',
        data: {
            labels: [20, 30, 40, 50, 60, 70, 18, 90, 110, 120],
            datasets: [{
                data: [66, 66, 66, 68, 70, 71, 73, 73, 78, 78],
                label: "Optymalna temperatura",
                borderColor: "#3e95cd",
                fill: false
            }, {
                data: losowo,
                label: "Temperatura z czujnika",
                borderColor: "#8e5ea2",
                fill: false
            }
            ]
        },
        options: {
            title: {
                display: true,
                text: 'Proces grzania'
            }
        }
    });
</script>
